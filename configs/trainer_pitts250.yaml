root: '/mnt/data/VPR4LQQ'

model_IO:
  weights_path: parameters/RA_VPR
  logs_path: logs/tensorboard_logs

data:
  rate: 30
  slice:
    FOV: 90
    PITCH:
      num: 1
      range: 20
    YAW:
      num: 18
    SHAPE:
      # height: 810
      # width: 1440
      height: 540
      width: 960
  compression:
    prepocess: true
    resolution:
      180p: [180,240]
      240p: [240,320]
      360p: [360,480]
      480p: [480,640]
    compressions:
      90%: 10    # value given to quality parameter in pillow.Image.save

train:
  video:
    sequence_num: 3
  nepoch: 1
  nparts: 6    # (Only for GSV-Cities) Split the training dataset into 1/nparts partitions
  batch_size: 6
  num_worker: 4
  num_cluster: 64
  cacheRefreshRate: 1000
  multiGPU: true
  resume: false
  lr: 0.000001
  lr_decay: 0.000000000002
  exponential_gamma: 0.99999
  data:
    resolution: 90%
    qp: -1
  cluster:
    descriptor_num: 500000
    descriptor_per_image: 100
    dimension: 512
  loss:
    distill: true
    vlad: true
    triplet: true
  triplet_loss:
    posDistThr: 30
    nonTrivPosDistSqThr: 20
    nPosSample: 1
    nNegSample: 5
    margin: 0.2

vpr:
  topk:
    - 1
    - 2
    - 5
    - 10
    - 15
    - 20
    - 25
  threshold:
    - 25
  global_extractor:
    # If netvlad is used, then remaining methods are ignored given GlobalExtractor preprocess=False
    NetVlad:
      use: true
      ckpt_path: 'parameters/netvlad/paper/checkpoints'
      arch: 'vgg16'
      num_clusters: 64
      pooling: 'netvlad'
      vladv2: false
      nocuda: false
    MixVPR:
      use: true
      ckpt_path: 'parameters/MixVPR/ckpts/resnet50_MixVPR_4096_channels(1024)_rows(4).ckpt'
      pt_img_size: [320, 320]    # The input image resolution for MixVPR's pretrained weights
      cuda: true
    AnyLoc:
      use: true
      model_type: 'dinov2_vitg14'    # One of the following: "dinov2_vit<s|b|l|g>14"; should be same between training and testing
      ckpt_path: 'None'    # If set to 'None', loads model_type from PyTorch Hub
      max_image_size: 1024    # To prevent out of memory
      desc_layer: 31
      desc_facet: 'value'    # one of "query", "key", "value", "token"
      num_clusters: 32
      domain: 'indoor'    # one of "aerial", "indoor", "urban"
      cache_dir: 'parameters/AnyLoc/demo/cache'
      cuda: true
    DinoV2Salad:
      use: true
      ckpt_path: 'parameters/DinoV2Salad/ckpts/dino_salad.ckpt'
      max_image_size: 1024    # To prevent out of memory
      cuda: true
    CricaVPR:
      use: true
      ckpt_path: 'parameters/CricaVPR/ckpts/CricaVPR.pth'
      cuda: true
  local_feature: 'superpoint'